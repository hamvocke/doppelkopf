version: 2.1

orbs:
  codecov: codecov/codecov@3.1.0

jobs:
  frontend:
    docker:
      - image: circleci/node:14.17.0-browsers
    working_directory: ~/hamvocke/doppelkopf
    steps:
      - checkout
      - attach_workspace:
          at: ~/hamvocke/doppelkopf
      - restore_cache:
          key: v1-frontend-yarn-{{ checksum "frontend/yarn.lock" }}
      - run:
          name: Install frontend dependencies
          command: 'pushd frontend && yarn install && popd'
      - save_cache:
          key: v1-frontend-yarn-{{ checksum "frontend/yarn.lock" }}
          paths:
            - frontend/node_modules
      - run:
          name: Test frontend
          command: 'pushd frontend && yarn test:ci && yarn test:e2e && popd'
      - store_artifacts:
          path: coverage
      - run:
          name: Build frontend
          command: 'pushd frontend && yarn build && popd'
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - codecov/upload:
          file: coverage/coverage-final.json
          flags: frontend

  backend:
    docker:
      - image: circleci/python:3.9
    working_directory: ~/hamvocke/doppelkopf
    steps:
      - checkout
      - attach_workspace:
          at: ~/hamvocke/doppelkopf
      - run:
          name: Install backend dependencies
          command: 'pushd backend && make install && popd'
      - run:
          name: Test backend
          command: 'pushd backend && make test && popd'

  build_docker:
    working_directory: ~/hamvocke/doppelkopf
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: ~/hamvocke/doppelkopf
      - restore_cache:
          key: v1-frontend-yarn-{{ checksum "frontend/yarn.lock" }}
      - run:
          name: Docker login
          command: 'echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin'
      - run:
          name: Docker build
          command: |
            touch backend/.env
            docker-compose build
      - run:
          name: Docker push
          command: 'docker-compose push'

  deploy_staging:
    docker:
      - image: cimg/base:2020.08
    working_directory: ~/hamvocke/doppelkopf
    steps:
      - checkout
      - attach_workspace:
          at: ~/hamvocke/doppelkopf
      - add_ssh_keys:
          fingerprints:
            - "4b:46:c1:f8:dd:bf:bc:cf:5c:44:c4:5c:4f:8e:1f:22"
      - run:
          name: Copy files
          command: 'scp -o StrictHostKeyChecking=no docker-compose{.prod,}.yml $SSH_USER_STAGING@$SSH_HOST_STAGING:/data/doppelkopf/'
      - run:
          name: Start Docker containers
          command: |
            ssh -T $SSH_USER_STAGING@$SSH_HOST_STAGING -o StrictHostKeyChecking=no \<< EOF
              cd /data/doppelkopf
              docker-compose pull
              export APP_ENVIRONMENT="staging" && docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            EOF
      - run:
          name: Smoke test
          command: |
            bash ci/smoke_test.sh

  deploy_prod:
    docker:
      - image: cimg/base:2020.08
    working_directory: ~/hamvocke/doppelkopf
    steps:
      - checkout
      - attach_workspace:
          at: ~/hamvocke/doppelkopf
      - add_ssh_keys:
          fingerprints:
            - "4b:46:c1:f8:dd:bf:bc:cf:5c:44:c4:5c:4f:8e:1f:22"
      - run:
          name: Copy files
          command: 'scp -o StrictHostKeyChecking=no docker-compose{.prod,}.yml $SSH_USER_PROD@$SSH_HOST_PROD:/data/doppelkopf/'
      - run:
          name: Start Docker containers
          command: |
            ssh -T $SSH_USER_PROD@$SSH_HOST_PROD -o StrictHostKeyChecking=no \<< EOF
              cd /data/doppelkopf
              docker-compose pull
              export APP_ENVIRONMENT="prod" && docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            EOF
      - run:
          name: Smoke test
          command: |
            bash ci/smoke_test.sh

workflows:
  version: 2
  build-all-deploy:
    jobs:
      - frontend
      - backend
      - build_docker:
          requires:
            - frontend
            - backend
          filters:
            branches:
              only: master
      - deploy_prod:
          requires:
            - build_docker
          filters:
            branches:
              only: master
